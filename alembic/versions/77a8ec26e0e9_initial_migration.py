"""initial migration

Revision ID: 77a8ec26e0e9
Revises: 
Create Date: 2025-01-31 00:22:23.019617

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '77a8ec26e0e9'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('last_login', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    comment='사용자 테이블',
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.create_index('idx_user_email_is_active', 'users', ['email', 'is_active'], unique=False)
    op.create_table('order_items',
    sa.Column('order_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('product_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('price_at_time', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint('price_at_time >= 0::numeric', name='check_positive_price'),
    sa.CheckConstraint('quantity > 0', name='check_positive_quantity'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='order_items_order_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='order_items_product_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='order_items_pkey'),
    comment='주문 상품 테이블'
    )
    op.create_index('idx_order_item_product', 'order_items', ['product_id'], unique=False)
    op.create_index('idx_order_item_order', 'order_items', ['order_id'], unique=False)
    op.create_table('profiles',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('birth_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='profiles_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='profiles_pkey'),
    sa.UniqueConstraint('user_id', name='profiles_user_id_key'),
    comment='사용자 프로필 테이블'
    )
    op.create_index('idx_profile_name', 'profiles', ['name'], unique=False)
    op.create_table('inventories',
    sa.Column('product_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('low_stock_threshold', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_restock_date', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint('quantity >= 0', name='check_positive_quantity'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='inventories_product_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='inventories_pkey'),
    sa.UniqueConstraint('product_id', name='inventories_product_id_key'),
    comment='재고 테이블'
    )
    op.create_index('idx_inventory_low_stock', 'inventories', ['quantity', 'low_stock_threshold'], unique=False)
    op.create_table('orders',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('total_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('payment_status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('shipping_address', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('tracking_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint('total_amount >= 0::numeric', name='check_positive_total'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='orders_user_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='orders_pkey'),
    comment='주문 테이블'
    )
    op.create_index('idx_order_user_status', 'orders', ['user_id', 'status'], unique=False)
    op.create_index('idx_order_payment_status', 'orders', ['payment_status'], unique=False)
    op.create_table('products',
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('product_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_available', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint('price >= 0::numeric', name='check_positive_price'),
    sa.PrimaryKeyConstraint('id', name='products_pkey'),
    comment='상품 테이블'
    )
    op.create_index('idx_product_name', 'products', ['name'], unique=False)
    op.create_index('idx_product_category_price', 'products', ['category', 'price'], unique=False)
    # ### end Alembic commands ###



def downgrade() -> None:
    pass